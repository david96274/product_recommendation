import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import pickle


# ========== C√ÄI ƒê·∫∂T GIAO DI·ªÜN CHUNG ==========
st.set_page_config(page_title="Recommendation System", layout="wide")
st.title("Recommendation System: ")
st.markdown("<h1 style='color:black; font-size: 30px;'> <b>Th·ªùi Trang Nam.</b></h1>", unsafe_allow_html=True)

menu = ["Home", "Project Introduction", "Achievements", "Users"]
choice = st.sidebar.selectbox('Menu', menu)
st.sidebar.markdown("---")
st.sidebar.image("shoppee_menu.jpg", use_container_width=True)
st.sidebar.markdown("---")
st.sidebar.markdown("üë©‚Äçüè´ **Gi·∫£ng vi√™n:**\n\nC√¥: Khu·∫•t Th√πy Ph∆∞∆°ng")
st.sidebar.markdown("üéñÔ∏è **Th·ª±c hi·ªán b·ªüi:**")
st.sidebar.info("D∆∞∆°ng ƒê·∫°i D≈©ng")
st.sidebar.markdown("üìÖ **Ng√†y b√°o c√°o:** 13/04/2025")

# ========== H√ÄM HI·ªÇN TH·ªä S·∫¢N PH·∫®M ==========
def display_recommended_products(recommended_products, cols=3):
    for i in range(0, len(recommended_products), cols):
        columns = st.columns(cols)
        for j, col in enumerate(columns):
            if i + j < len(recommended_products):
                product = recommended_products.iloc[i + j]
                with col:
                    if isinstance(product['image'], str) and product['image']:
                        try:
                            st.image(product['image'], caption=product['product_name'], use_container_width=True)
                        except Exception as e:
                            st.warning(f"Kh√¥ng th·ªÉ hi·ªÉn th·ªã ·∫£nh cho s·∫£n ph·∫©m '{product['product_name']}': {e}")
                    st.markdown(f"**{product['product_name']}**")
                    exp = st.expander(" M√¥ t·∫£")
                    truncated = ' '.join(product['Content'].split()[:30]) + "..."
                    exp.write(truncated)

# ========== TRANG CH·ª¶ ==========
if choice == 'Home':  
    st.subheader("[Trang ch·ªß](https://shopee.vn/)")
    st.image('shoppee4.jpg', use_container_width=True)
    st.write('ƒê·ªí √ÅN T·ªêT NGHI·ªÜP: DL07_DATN_K302 ')

# ========== GI·ªöI THI·ªÜU D·ª∞ √ÅN ==========
elif choice == 'Project Introduction':    
    st.markdown("### [ƒê·ªì √°n TN Data Science](https://csc.edu.vn/data-science-machine-learning/Do-An-Tot-Nghiep-Data-Science---Machine-Learning_229)")
    try:
        st.image('shoppee1.jpg', use_container_width=True)
    except:
        st.warning("Kh√¥ng t√¨m th·∫•y ·∫£nh 'shoppee1.jpg'!")

    st.write("""
        ### Recommendation System: Th·ªùi Trang Nam.
        - **Collaborative Filtering:**
            + Surprise.
            + ALS.
        - **Content-Based Filtering:**
            + Gensim.
            + Cosine-similarity.
    """)

# ========== TH√ÄNH T·ª∞U ==========
elif choice == 'Achievements': 
    st.write('Collaborative Filtering:')
    st.image('surprise_als.jpg', use_container_width=True)
    st.write('==> Ch·ªçn model SVD c·ªßa Surprise l√† t·ªëi ∆∞u nh·∫•t.')
    st.write('Content-Based Filtering:')
    st.image('gensim_cosine.jpg', use_container_width=True)
    st.write("""
        - Xin ph√©p s·ª≠ d·ª•ng cosine similarity.
        - X√¢y h·ªá th·ªëng g·ª£i √Ω t·∫•t c·∫£ s·∫£n ph·∫©m --> nhi·ªÅu ng∆∞·ªùi d√πng: gensim (TfidfModel, Similarity)
    """)

# ========== NG∆Ø·ªúI D√ôNG ==========
elif choice == 'Users':
    st.image('shoppee2.jpg', use_container_width=True)

    # ===== LOAD D·ªÆ LI·ªÜU C·∫¶N THI·∫æT =====
    with open('products_df.pkl', 'rb') as f:
        df_products = pickle.load(f)
    with open('recommendations_dict.pkl', 'rb') as f:
        recommendations_dict = pickle.load(f)
    with open("svd_model.pkl", "rb") as f:
        svd_model = pickle.load(f)
    with open("sample_df.pkl", "rb") as f:
        ratings_df = pickle.load(f)
    with open("products_name_df.pkl", "rb") as f:
        products_name_df = pickle.load(f)

    # ===== G·ª¢I √ù CONTENT-BASED =====
    st.markdown("##  G·ª£i √Ω theo s·∫£n ph·∫©m b·∫°n ƒë√£ ch·ªçn")
    random_products = df_products.sample(n=20)
    product_options = [(row['product_name'], row['product_id']) for _, row in random_products.iterrows()]
    selected_product = st.selectbox(" Ch·ªçn s·∫£n ph·∫©m", options=product_options, format_func=lambda x: x[0])

    if selected_product:
        selected_ma_sp = selected_product[1]
        st.write("B·∫°n ƒë√£ ch·ªçn s·∫£n ph·∫©m c√≥ m√£:", selected_ma_sp)
        selected_info = df_products[df_products['product_id'] == selected_ma_sp]

        if not selected_info.empty:
            st.markdown(f"###  {selected_info['product_name'].values[0]}")
            truncated_desc = ' '.join(selected_info['Content'].values[0].split()[:50]) + "..."
            st.write("**M√¥ t·∫£:**", truncated_desc)

            st.markdown("### ¬†S·∫£n ph·∫©m li√™n quan b·∫°n c√≥ th·ªÉ th√≠ch:")
            related_ids = recommendations_dict.get(selected_ma_sp, [])
            related_products = df_products[df_products['product_id'].isin(related_ids)]
            display_recommended_products(related_products, cols=3)

    st.image('shoppee3.jpg', use_container_width=True)

    # ===== G·ª¢I √ù THEO USER =====
    st.markdown("---")
    st.markdown("##  G·ª£i √Ω s·∫£n ph·∫©m d·ª±a tr√™n h√†nh vi ng∆∞·ªùi d√πng (H·ªôi vi√™n)")
    st.write('M·ªôt s·ªë user_id v√≠ d·ª•: 378643, 244923, 307455, 354, 97688.')
    user_input = st.text_input("Nh·∫≠p m√£ ng∆∞·ªùi d√πng (user_id):")

    if user_input:
        try:
            user_id = int(user_input)
            rated_products = ratings_df[ratings_df["user_id"] == user_id]["product_id"].tolist()
            all_products = df_products["product_id"].tolist()
            unrated_products = [pid for pid in all_products if pid not in rated_products]

            predictions = []
            for pid in unrated_products:
                pred = svd_model.predict(user_id, pid)
                predictions.append((pid, pred.est))

            top_preds = sorted(predictions, key=lambda x: x[1], reverse=True)[:9]
            top_product_ids = [pid for pid, _ in top_preds]
            recommended_df = df_products[df_products["product_id"].isin(top_product_ids)]

            st.markdown("###  G·ª£i √Ω theo h√†nh vi ng∆∞·ªùi d√πng:")
            display_recommended_products(recommended_df, cols=3)

        except ValueError:
            st.warning("Vui l√≤ng nh·∫≠p `user_id` h·ª£p l·ªá (s·ªë nguy√™n).")








